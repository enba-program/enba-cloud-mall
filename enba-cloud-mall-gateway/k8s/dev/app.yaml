apiVersion: apps/v1          # 使用的Kubernetes API版本，apps/v1是Deployment的稳定版本
kind: Deployment             # 资源类型为Deployment，用于管理Pod的创建和更新
metadata:
  name: gateway-service      # Deployment的名称
  namespace: microservices   # 部署到microservices命名空间，实现资源隔离
  labels:                    # 给Deployment添加标签，用于识别和筛选
    app: gateway-service
    tier: gateway
    environment: production
spec:
  replicas: 2                # 指定需要运行的Pod副本数量为2，保证高可用
  selector:                  # 标签选择器，用于匹配要管理的Pod
    matchLabels:
      app: gateway-service
  strategy:                  # 部署策略配置
    rollingUpdate:           # 滚动更新策略，确保更新过程中服务不中断
      maxSurge: 1            # 最多可超出期望副本数的数量
      maxUnavailable: 0      # 更新过程中最多不可用的副本数
    type: RollingUpdate      # 使用滚动更新策略
  template:                  # Pod模板，定义Pod的规格
    metadata:
      labels:                # Pod的标签，必须与selector.matchLabels匹配
        app: gateway-service
        tier: gateway
        environment: production
    spec:
      containers:            # 容器配置列表
        - name: gateway-service  # 容器名称
          image: your-registry/gateway-service:latest  # 容器使用的镜像
          imagePullPolicy: Always  # 总是从镜像仓库拉取最新镜像
          ports:
            - containerPort: 8080  # 容器暴露的端口
          resources:          # 资源请求和限制
            requests:         # 容器启动时请求的资源量
              memory: "1Gi"   # 请求1GB内存
              cpu: "1000m"    # 请求1核CPU (1000m = 1核)
            limits:           # 容器可使用的最大资源量
              memory: "2Gi"   # 最大使用2GB内存
              cpu: "2000m"    # 最大使用2核CPU
          env:                # 环境变量配置
            - name: SPRING_PROFILES_ACTIVE
              value: "prod"   # 激活Spring的prod环境配置
            - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
              value: "http://service-registry:8761/eureka/"  # Eureka注册中心地址
            # 以下是Spring Cloud Gateway的路由配置
            - name: SPRING_CLOUD_GATEWAY_ROUTES[0]_ID
              value: "product-service"  # 路由ID
            - name: SPRING_CLOUD_GATEWAY_ROUTES[0]_URI
              value: "lb://product-service"  # 路由目标服务，使用负载均衡
            - name: SPRING_CLOUD_GATEWAY_ROUTES[0]_PREDICATES[0]
              value: "Path=/api/products/**filters=StripPrefix=1"  # 路由规则和过滤器
            # 用户服务路由配置
            - name: SPRING_CLOUD_GATEWAY_ROUTES[1]_ID
              value: "user-service"
            - name: SPRING_CLOUD_GATEWAY_ROUTES[1]_URI
              value: "lb://user-service"
            - name: SPRING_CLOUD_GATEWAY_ROUTES[1]_PREDICATES[0]
              value: "Path=/api/users/**filters=StripPrefix=1"
            # 订单服务路由配置
            - name: SPRING_CLOUD_GATEWAY_ROUTES[2]_ID
              value: "order-service"
            - name: SPRING_CLOUD_GATEWAY_ROUTES[2]_URI
              value: "lb://order-service"
            - name: SPRING_CLOUD_GATEWAY_ROUTES[2]_PREDICATES[0]
              value: "Path=/api/orders/**filters=StripPrefix=1"
          readinessProbe:     # 就绪探针，判断容器是否准备好接收请求
            httpGet:          # 使用HTTP GET方法检查
              path: /actuator/health/readiness  # 健康检查路径(需要Spring Actuator支持)
              port: 8080      # 检查端口
            initialDelaySeconds: 30  # 容器启动后延迟30秒开始检查
            periodSeconds: 10        # 每10秒检查一次
            timeoutSeconds: 3        # 检查超时时间3秒
            failureThreshold: 3      # 连续3次失败视为未就绪
          livenessProbe:      # 存活探针，判断容器是否正常运行
            httpGet:
              path: /actuator/health/liveness  # 存活检查路径
              port: 8080
            initialDelaySeconds: 60  # 容器启动后延迟60秒开始检查
            periodSeconds: 15        # 每15秒检查一次
            timeoutSeconds: 3        # 检查超时时间3秒
            failureThreshold: 3      # 连续3次失败会重启容器
          volumeMounts:       # 挂载卷到容器内部
            - name: config-volume  # 卷名称，需与下面volumes中的名称一致
              mountPath: /app/config  # 容器内的挂载路径
      volumes:               # 定义卷
        - name: config-volume  # 卷名称
          configMap:          # 使用ConfigMap作为卷的数据源
            name: gateway-service-config  # ConfigMap的名称

---                           # 分隔符，用于在一个文件中定义多个资源
apiVersion: v1                # Service使用的API版本
kind: Service                 # 资源类型为Service
metadata:
  name: gateway-service       # Service的名称
  namespace: microservices    # 所属命名空间
  labels:
    app: gateway-service
    tier: gateway
spec:
  selector:                   # 标签选择器，匹配要暴露的Pod
    app: gateway-service
  ports:
    - port: 80                # Service暴露的端口
      targetPort: 8080        # 映射到Pod的端口
  type: LoadBalancer          # Service类型为LoadBalancer，会自动创建外部负载均衡器

---
apiVersion: autoscaling/v2    # HPA使用的API版本
kind: HorizontalPodAutoscaler  # 资源类型为HPA，用于自动扩缩容
metadata:
  name: gateway-service-hpa   # HPA的名称
  namespace: microservices
spec:
  scaleTargetRef:             # 指定要扩缩容的目标资源
    apiVersion: apps/v1
    kind: Deployment
    name: gateway-service     # 目标Deployment的名称
  minReplicas: 2              # 最小副本数
  maxReplicas: 10             # 最大副本数
  metrics:                    # 扩缩容的指标
    - type: Resource          # 基于资源的指标
      resource:
        name: cpu             # CPU使用率指标
        target:
          type: Utilization   # 基于使用率
          averageUtilization: 70  # 平均使用率达到70%时触发扩容
    - type: Resource
      resource:
        name: memory          # 内存使用率指标
        target:
          type: Utilization
          averageUtilization: 80  # 平均使用率达到80%时触发扩容